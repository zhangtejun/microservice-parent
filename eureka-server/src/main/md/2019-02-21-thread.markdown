---
layout: post
title:  "thread"
date:   2018-02-18 10:53:02
author: zhangtejun
categories: java
---
##### thread State状态 6个枚举
```java
public enum State {
        NEW,// 新创建了一个线程对象，但还没有调用start()方法
        RUNNABLE,// 线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。
        BLOCKED,// 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行
        WAITING,// 该状态的线程需要等待其他线程做出一些特定动作（通知或中断）
        TIMED_WAITING,// 超时等待,该状态不同于WAITING，它可以在指定的时间后自行返回
        TERMINATED //线程已经执行完毕
    }
```
##### 停止线程
1.  使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。 
2.  使用stop方法强行终止线程（这个方法不推荐使用，都是已过时的方法，因为stop和suspend、resume一样，也可能发生不可预料的结果）。 
3.  使用interrupt方法中断线程
```java
public static boolean interrupted() {...};// 当前线程是否已经中断，该方法具有清除状态功能
public boolean isInterrupted() {};// 线程是否已中断
```
```java
public class Tets1 {
    public static void main(String[] args) throws InterruptedException {
            Runnable r = () -> {for (int i=0 ;i<1000;i++){
                System.out.println("i="+i);}
            };
            Thread t = new Thread(r);
            t.start();
            Thread.sleep(1000);
            t.interrupt();// 虽然是在t对象上调用interrupt方法，
            System.out.println("是否停止1 ： "+t.isInterrupted());// false
            System.out.println("是否停止2 ： "+t.isInterrupted());// false 当前线程为main,它未中断。
        }
    
        @Test
        public void t1(){
            Thread.currentThread().interrupt();
            System.out.println("是否停止1 ： "+Thread.interrupted());// true  interrupted判断当前线程是否已是停止状态，该方法具有清除状态功能
            System.out.println("是否停止2 ： "+Thread.interrupted());// false
        }
 }
```
调用stop方法时会抛出`java.lang.ThreadDeath`异常，通常情况下该异常不需要显示捕获。该异常继承至Error。
该方法已被废弃，原因为：强制停止线程有可能导致一些清理工作无法完成，如果对锁定对象进行锁的释放，可能会出现数据得不到同步处理，导致数据不一致。

##### 暂停线程
###### suspend / resume
暂停线程意味着此线程还可以恢复运行，可以用suspend()方法暂停线程，使用resume()方法恢复线程的执行。但是如果使用不当，会造成公共的同步对象独占，
使其他线程无法访问公共同步对象。

该方法也会出现因线程的暂停而导致数据不同步。

###### yield
理论上来说，yield意味着 屈服，投降。yield方法的作用是放弃当前CPU资源，一个调用yield()方法的线程告诉虚拟机它乐意让其他线程占用自己的位置。
但是放弃的时间不定，有可能刚刚放弃，马上又获得了CPU 时间片。
* Yield是一个静态的原生(native)方法
* Yield告诉当前正在执行的线程把运行机会交给线程池中拥有相同优先级的线程
* Yield不能保证使得当前正在运行的线程迅速转换到可运行的状态
* 它仅能使一个线程从运行状态转到可运行状态，而不是等待或阻塞状态

>线程优先级（setPriority方法可设置线程优先级）
>>在操作系统中，线程有优先级，优先级高的线程获得CPU资源要多，也就是说CPU优先执行优先级高的任务。  
>>java中，线程的优先级范围为1 ~ 10，如果不在这个范围内JDK将抛出异常。  
>>线程优先级具有继续性，如A线程启动B线程，则B线程的优先级同A线程。  
>>线程优先级具有规则性，线程的优先级和代码的执行顺序无关，CPU只是尽量将资源让给优先级高的线程。
>>线程优先级具有随机性和不确定性

>守护线程
>>Java分为两种线程：用户线程和守护线程
>>守护线程具有“陪伴”的含义，当进程中不存在非守护线程时，则守护线程自动销毁，即程序终止。比如垃圾回收线程，进程中没有非守护线程，那该线程就没有存在的必要了。
>>反过来说，只要任何非守护线程还在运行，程序就不会终止，守护进程就在运行。Daemon的作用就是为其他线程运行提供服务。

##### 对象和变量的并发访问
###### sychronized 同步方法
* 非实例变量：方法内的变量为线程安全，“非线程安全”问题存在于“实例变量”中，如果是方法内部的私有变量，则不存在该问题。
* 实例变量：
>>

